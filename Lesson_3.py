'''
1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать
у пользователя, предусмотреть обработку ситуации деления на ноль.
'''

def tik_1(num_1, num_2):
    num_1, num_2 = float(num_1), float(num_2)
    try:
        result = num_1 / num_2
    except ZeroDivisionError as error:
        print(error)
        result = (float("inf"))

    return (result)


number_1 = input('Введите первое значение - ')
number_2 = input('Введите второе значение - ')
print(number_1, 'делить на', number_2, '=', tik_1(number_1, number_2))

assert (4 == tik_1(8, 2))


'''
2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия, год
рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы.
Осуществить вывод данных о пользователе одной строкой.
'''

# про ограничение колличества именнованных аргументов не сказано:

def customer_data_string_1(**customer_data):
    string = ''
    for key in customer_data.keys():
        string += str(key) + ': ' + str(customer_data[key]) + '; '
    print(string)


'''
3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает 
сумму наибольших двух аргументов.
'''


def my_func(arg_1, arg_2, arg_3):
    try:
        arg_1, arg_2, arg_3 = float(arg_1), float(arg_2), float(arg_3)
        sorted_args = sorted((arg_1, arg_2, arg_3), reverse=True)
        result = sorted_args[0] + sorted_args[1]
    except:
        print('Некоторые аргументы my_func не являются числами')
        result = False

    return (result)

assert 16 == my_func(1, 5, 11)



'''
4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение числа x
в степень y. Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без встроенной функции
возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
'''



def my_func_4(x: float, y: int):
    if not (isinstance(x, (float, int)) and isinstance(y, int)):
        raise TypeError('Ожидалось что x - действительное положительное число, y - целое отрицательное число')
    if not (y < 0 and x >= 0):
        raise TypeError('Ожидалось что x - int, y - целое отрицательное число')

    result_1 = x**y

    result_2 = x
    for i in range(-1 + y * -1):
        result_2 *= x
    result_2 = 1 / result_2

    return (result_1, result_2)


assert (4**-2, 4**-2) == my_func_4(4, -2)

'''
5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма 
чисел. Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел 
будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введён после
нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
'''

# я так понимаю раз тема 3 это функции, то наверное надо сделать одну функцию
# .... то вначале нужно добавить сумму этих чисел к полученной ранее сумме (И ВЫВЕСТИ?) и после этого завершить
def tik_5(loop_on=True):
    def conv_to_floa(i):
        return float(i)
    base_num = 0
    while loop_on:
        num_list = input('Введите строку чисел, разделённых пробелом, для отмены введите stop - ').split()
        if num_list[-1] == 'stop':
            loop_on = False
            num_list = map(conv_to_floa, num_list[:-1])
            base_num += sum(num_list)
        else:
            num_list = map(conv_to_floa, num_list)
            base_num += sum(num_list)

        print(base_num)

# тема 3 это функции, так что видимо это должна быть функция. запустим:
tik_5()

'''
6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной 
первой буквой. Например, print(int_func(‘text’)) -> Text.
'''

def int_func(word):
    try:
        word.encode(encoding='utf-8').decode('ascii') # остальные знаки в ascii можно считать латиницей?
    except UnicodeDecodeError:
        print('Что то введено не на латинице')  # в целом то продолжать можно с любыми знакими, исключение не кидаю
    pass

    return word.capitalize()

assert 'This' == int_func('this')

'''
7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом. Каждое слово
состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки, но каждое слово должно начинаться с
заглавной буквы. Используйте написанную ранее функцию int_func().
'''

def int_func(words):
    try:
        words.encode(encoding='utf-8').decode('ascii')  # остальные знаки в ascii можно считать латиницей?
    except UnicodeDecodeError:
        print('Что то введено не на латинице')  # в целом то продолжать можно с любыми знакими, исключение не кидаю
    pass
    return words.title()


assert 'This Is Tik_7' == int_func('this is tik_7')
